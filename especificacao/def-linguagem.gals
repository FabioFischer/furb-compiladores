#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions

  letMai: [A-Z]

  letMin: [a-z]

  dig: [0-9]

  caracForm: \\n|\\t|\\s

  exc: [^\n\"\\]

  excCom: [^\n\*\\]

  ws: [\ \t\n\r]
#Tokens


  // expressões

  palavra_reservada: {letMin}+ ( {letMai}? {letMin} )*

  identificador: _ (  ({letMin})+ {letMai}? | {letMai} ) ( ( {letMin} | {dig} ) | ( ( {letMin} | {dig} )+ {letMai} ) )*

  constante_numerica: {dig}+ (\. {dig}+)?

  constante_caractere: ' {caracForm} '

  constante_literal: \" ({exc})* \"

  :! /\*\* ( {excCom} | ( \* ) + ( \* {excCom}+ )* )* \ \*\*/


  // palavras reservadas

  AND = palavra_reservada : "and"
  
  ARRAY = palavra_reservada : "array"

  DO = palavra_reservada : "do"

  EXIT = palavra_reservada  : "exit"

  FALSE = palavra_reservada : "false"

  IF = palavra_reservada : "if"

  IFFALSEDO = palavra_reservada : "ifFalseDo"

  IFTRUEDO = palavra_reservada : "ifTrueDo"

  LITERAL = palavra_reservada : "literal"

  LOGICAL = palavra_reservada : "logical"

  NUMBER = palavra_reservada : "number"

  NOT = palavra_reservada : "not"

  OR = palavra_reservada : "or"

  READ = palavra_reservada : "read"

  TRUE = palavra_reservada : "true"

  WRITE = palavra_reservada : "write"

  // símbolos especiais

  ":"
  ","
  "["
  "]"
  "{"
  "}"
  "("
  ")"
  ":="
  "+"
  "-"
  "*"
  "/"
  "="
  "!="
  "<"
  "<="
  ">"
  ">="

  // ignorar caractéres de formação

  : {ws}
#NonTerminals
<programa>

<declaracao_de_variaveis>

<lista_de_comandos>

<lista_de_comandos2>

<comando>

<comando_de_atribuicao>
<comando_de_entrada>
<comando_de_saida>
<comando_de_selecao>
<comando_de_repeticao>

<declaracao>
<declaracao_opcional>

<tipo>

<lista_de_identificadores>
<lista_de_identificadores_opcional>

<declarao_opcional>

<tipo_simples>
<tipo_array>

<expressao>
<expressao2>

<expressao_opcional>
<expressao_opcional2>

<lista_de_identificadores_entrada>
<lista_de_identificadores_entrada_opcional>

<expressao_entrada_opcional>

<lista_de_expressoes>
<lista_de_expressoes_opcional>

<clausula_opcional>

<elemento>

<relacional>
<relacional_opcional>

<operador_relacional>

<aritmetica>
<aritmetica2>

<termo>
<termo2>

<fator>
<fator2>
#Grammar
<programa> ::= #15 <declaracao_de_variaveis> "{" <lista_de_comandos> "}" #16 ;

<lista_de_comandos> ::= <lista_de_comandos2>;
<lista_de_comandos2> ::= î | <comando> <lista_de_comandos>;

<comando> ::= <comando_de_atribuicao> | <comando_de_entrada> | <comando_de_saida> | <comando_de_selecao> | <comando_de_repeticao>;

<declaracao_de_variaveis> ::= <declaracao_opcional>;
<declaracao_opcional> ::= î | <declaracao>;

<declaracao> ::= <tipo> #101 ":" <lista_de_identificadores> #103 <declaracao_opcional>;

<tipo> ::= <tipo_simples> | <tipo_array>;

<tipo_simples> ::= NUMBER | LITERAL | LOGICAL;

<tipo_array> ::= ARRAY "[" <tipo_simples> "," constante_numerica "]";

<lista_de_identificadores> ::= identificador #102 <lista_de_identificadores_opcional>;
<lista_de_identificadores_opcional> ::= î | "," <lista_de_identificadores>;

<comando_de_atribuicao> ::= identificador #102 <expressao_opcional> ":=" <expressao> #106;

<expressao_opcional> ::= î | <expressao_opcional2>;
<expressao_opcional2> ::= "[" <expressao> "]";

<comando_de_entrada> ::= READ "(" <lista_de_identificadores_entrada> #104 ")";

<lista_de_identificadores_entrada> ::= identificador #102 <expressao_entrada_opcional> <lista_de_identificadores_entrada_opcional>;
<lista_de_identificadores_entrada_opcional> ::= î | "," <lista_de_identificadores_entrada>;

<expressao_entrada_opcional> ::= î | <expressao_opcional2>;

<comando_de_saida> ::= WRITE "(" <lista_de_expressoes> ")";

<lista_de_expressoes> ::= <expressao> #14 <lista_de_expressoes_opcional>;
<lista_de_expressoes_opcional> ::= î | "," <lista_de_expressoes>;

<comando_de_selecao> ::= "(" <expressao> #107 ")" IFTRUEDO "{" <lista_de_comandos> "}" <clausula_opcional> #108 ;

<clausula_opcional> ::= î | #109 IFFALSEDO "{" <lista_de_comandos> "}";

<comando_de_repeticao> ::= #110 DO "{" <lista_de_comandos> IF "(" <expressao> #111 ")" EXIT <lista_de_comandos> "}" #112 ;

<expressao> ::= <elemento> <expressao2>;
<expressao2> ::= î | AND <elemento> #17 <expressao2> | OR <elemento> #18 <expressao2>;

<elemento> ::= <relacional> | TRUE #11 | FALSE #12 | NOT <elemento> #13 ;

<relacional> ::= <aritmetica> <relacional_opcional>;
<relacional_opcional> ::= î | <operador_relacional> #9 <aritmetica> #10;

<operador_relacional> ::= "=" | "!=" | "<" | "<=" | ">" | ">=";

<aritmetica> ::= <termo> <aritmetica2>;
<aritmetica2> ::= î | "+" <termo> #1 <aritmetica2> | "-" <termo> #2 <aritmetica2>;

<termo> ::= <fator> <termo2>;
<termo2> ::= î | "*" <fator> #3 <termo2> | "/" <fator> #4 <termo2> ;

<fator> ::= identificador #105 <fator2> | constante_numerica #6 | constante_caractere #19 | constante_literal #20 | "(" <expressao> ")" | "+" <fator> #7 | "-" <fator> #8;
<fator2> ::= î |  "[" <expressao> "]";
