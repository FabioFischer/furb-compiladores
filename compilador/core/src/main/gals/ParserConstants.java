package gals;

/**
 *   FURB - Bacharelado em Ciências da Computação
 *   Compiladores - Sintatico
 *
 *   Fábio Luiz Fischer
 **/

public interface ParserConstants
{
    int START_SYMBOL = 42;

    int FIRST_NON_TERMINAL    = 42;
    int FIRST_SEMANTIC_ACTION = 80;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1,  0,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1,  9,  9,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1,  1, -1,  1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  3, -1, -1, -1, -1, -1,  3, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1,  3, -1,  3, -1, -1, -1, -1, -1,  2,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  4, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1,  6, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, 12, 12, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, 13, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, 20, 20, 20, -1, -1, -1, -1, -1, -1, 21, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 17, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 40, 40, 40, 40, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, 40, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, 40, 40, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 41, -1, -1, -1, 42, -1, 41, -1, -1, 41, -1, -1, -1, -1, -1, -1, 43, 41, -1, 41, -1, 41, -1, 41, -1, 41, 41, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 31, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 33, 33, 33, 33, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, 33, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, 33, 33, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 37, -1, -1, -1, -1, -1, 37, -1, -1, 37, 38, -1, -1, -1, -1, -1, -1, 37, -1, 37, -1, -1, -1, -1, -1, 37, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 44, 44, 44, 44, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, 47, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 48, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, 48, 48, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 49, -1, -1, -1, 49, -1, 49, -1, -1, 49, -1, -1, -1, -1, -1, -1, 49, 49, -1, 49, -1, 49, -1, 49, -1, 49, 49, 49, -1, -1, -1, -1, -1, 50, 50, 50, 50, 50, 50 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 52, 53, 54, 55, 56 },
        { -1, -1, 57, 57, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 58, -1, -1, -1, 58, -1, 58, -1, -1, 58, -1, -1, -1, -1, -1, -1, 58, 58, -1, 58, -1, 58, -1, 58, -1, 58, 58, 58, -1, 59, 60, -1, -1, 58, 58, 58, 58, 58, 58 },
        { -1, -1, 61, 61, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 62, -1, -1, -1, 62, -1, 62, -1, -1, 62, -1, -1, -1, -1, -1, -1, 62, 62, -1, 62, -1, 62, -1, 62, -1, 62, 62, 62, -1, 62, 62, 63, 64, 62, 62, 62, 62, 62, 62 },
        { -1, -1, 65, 66, 67, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, -1, 70, 71, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 72, -1, -1, -1, 72, -1, 72, -1, -1, 72, -1, -1, -1, -1, -1, -1, 72, 72, -1, 72, -1, 72, 73, 72, -1, 72, 72, 72, -1, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72 }
    };

    int[][] PRODUCTIONS = 
    {
        { 43, 27, 44, 28 },
        { 45 },
        {  0 },
        { 46, 44 },
        { 47 },
        { 48 },
        { 49 },
        { 50 },
        { 51 },
        { 53 },
        {  0 },
        { 52 },
        { 54, 23, 55, 53 },
        { 58 },
        { 59 },
        { 17 },
        { 15 },
        { 16 },
        {  8, 25, 58, 24,  4, 26 },
        {  3, 56 },
        {  0 },
        { 24, 55 },
        {  3, 62, 31, 60 },
        {  0 },
        { 63 },
        { 25, 60, 26 },
        { 20, 29, 64, 30 },
        {  3, 66, 65 },
        {  0 },
        { 24, 64 },
        {  0 },
        { 63 },
        { 22, 29, 67, 30 },
        { 60, 68 },
        {  0 },
        { 24, 67 },
        { 29, 60, 30, 14, 27, 44, 28, 69 },
        {  0 },
        { 13, 27, 44, 28 },
        {  9, 27, 44, 12, 29, 60, 30, 10, 44, 28 },
        { 70, 61 },
        {  0 },
        {  7, 70, 61 },
        { 19, 70, 61 },
        { 71 },
        { 21 },
        { 11 },
        { 18, 70 },
        { 74, 72 },
        {  0 },
        { 73, 74 },
        { 36 },
        { 37 },
        { 38 },
        { 39 },
        { 40 },
        { 41 },
        { 76, 75 },
        {  0 },
        { 32, 76, 75 },
        { 33, 76, 75 },
        { 78, 77 },
        {  0 },
        { 34, 78, 77 },
        { 35, 78, 77 },
        {  3, 79 },
        {  4 },
        {  5 },
        {  6 },
        { 29, 60, 30 },
        { 32, 78 },
        { 33, 78 },
        {  0 },
        { 25, 60, 26 }
    };

    String[] PARSER_ERROR =
    {
            "",//        "",
            " esperado fim de programa",//        "Era esperado fim de programa",
            " esperado palavra reservada",//        "Era esperado palavra_reservada",
            " esperado identificador",//        "Era esperado identificador",
            " esperado constante numerica",//        "Era esperado constante_numerica",
            " esperado constante caractere",//        "Era esperado constante_caractere",
            " esperado constante literal",//        "Era esperado constante_literal",
            " esperado and",//        "Era esperado AND",
            " esperado array",//        "Era esperado ARRAY",
            " esperado do",//        "Era esperado DO",
            " esperado exit",//        "Era esperado EXIT",
            " esperado false",//        "Era esperado FALSE",
            " esperado if",//        "Era esperado IF",
            " esperado ifFalseDo",//        "Era esperado IFFALSEDO",
            " esperado ifTrueDo",//        "Era esperado IFTRUEDO",
            " esperado literal",//        "Era esperado LITERAL",
            " esperado logical",//        "Era esperado LOGICAL",
            " esperado number",//        "Era esperado NUMBER",
            " esperado not",//        "Era esperado NOT",
            " esperado or",//        "Era esperado OR",
            " esperado read",//        "Era esperado READ",
            " esperado true",//        "Era esperado TRUE",
            " esperado write",//        "Era esperado WRITE",
            " esperado :",//        "Era esperado \":\"",
            " esperado ,",//        "Era esperado \",\"",
            " esperado [",//        "Era esperado \"[\"",
            " esperado ]",//        "Era esperado \"]\"",
            " esperado {",//        "Era esperado \"{\"",
            " esperado }",//        "Era esperado \"}\"",
            " esperado (",//        "Era esperado \"(\"",
            " esperado )",//        "Era esperado \")\"",
            " esperado :=",//        "Era esperado \":=\"",
            " esperado +",//        "Era esperado \"+\"",
            " esperado -",//        "Era esperado \"-\"",
            " esperado *",//        "Era esperado \"*\"",
            " esperado /",//        "Era esperado \"/\"",
            " esperado =",//        "Era esperado \"=\"",
            " esperado !=",//        "Era esperado \"!=\"",
            " esperado <",//        "Era esperado \"<\"",
            " esperado <=",//        "Era esperado \"<=\"",
            " esperado >",//        "Era esperado \">\"",
            " esperado >=",//        "Era esperado \">=\"",
            " esperado array literal logical number {",//        "<programa> inv�lido",
            " esperado array literal logical number {",//        "<declaracao_de_variaveis> inv�lido",
            " esperado identificador do if read write } (",//        "<lista_de_comandos> inv�lido",
            " esperado identificador do if read write } (",//        "<lista_de_comandos2> inv�lido",
            " esperado identificador do read write (",//        "<comando> inv�lido",
            " esperado identificador",//        "<comando_de_atribuicao> inv�lido",
            " esperado read",//        "<comando_de_entrada> inv�lido",
            " esperado write",//        "<comando_de_saida> inv�lido",
            " esperado (",//        "<comando_de_selecao> inv�lido",
            " esperado do",//        "<comando_de_repeticao> inv�lido",
            " esperado array literal logical number",//        "<declaracao> inv�lido",
            " esperado array literal logical number {",//        "<declaracao_opcional> inv�lido",
            " esperado array literal logical number",//        "<tipo> inv�lido",
            " esperado identificador",//        "<lista_de_identificadores> inv�lido",
            " esperado array literal logical number , {",//        "<lista_de_identificadores_opcional> inv�lido",
            " esperado array literal logical number",//        "<declarao_opcional> inv�lido",
            " esperado literal logical number",//        "<tipo_simples> inv�lido",
            " esperado expressao",//        "<expressao> inv�lido",
            " esperado array",//        "<TIPO_ARRAY> INV�LIDO",
            " esperado expressao",//        "<expressao2> inv�lido",
            " esperado [ :=",//        "<expressao_opcional> inv�lido",
            " esperado [",//        "<expressao_opcional2> inv�lido",
            " esperado identificador ",//        "<lista_de_identificadores_entrada> inv�lido",
            " esperado , )",//        "<lista_de_identificadores_entrada_opcional> inv�lido",
            " esperado , [ )",//        "<expressao_entrada_opcional> inv�lido",
            " esperado identificador constante numerica constante caractere constante literal false not true ( + -",//        "<lista_de_expressoes> inv�lido",
            " esperado : )",//        "<lista_de_expressoes_opcional> inv�lido",
            " esperado identificador do if ifFalseDo read write } (",//        "<clausula_opcional> inv�lido",
            " esperado expressao",//        "<elemento> inv�lido",
            " esperado expressao",//        "<relacional> inv�lido",
            " esperado expressao",//        "<relacional_opcional> inv�lido",
            " esperado expressao",//        "<operador_relacional> inv�lido",
            " esperado expressao",//        "<aritmetica> inv�lido",
            " esperado expressao",//        "<aritmetica2> inv�lido",
            " esperado expressao",//        "<termo> inv�lido",
            " esperado expressao",//        "<termo2> inv�lido",
            " esperado expressao",//        "<fator> inv�lido",
            " esperado expressao"//        "<fator2> inv�lido"
    };
}
