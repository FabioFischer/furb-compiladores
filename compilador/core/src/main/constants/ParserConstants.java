package constants;

/**
 * FURB - Bacharelado em Ciências da Computação
 * Compiladores - Interface
 * <p>
 * Fábio Luiz Fischer & Matheus Felipe Klauberg
 **/

public interface ParserConstants {
    int START_SYMBOL = 37;
    
    int FIRST_NON_TERMINAL = 37;
    int FIRST_SEMANTIC_ACTION = 70;
    
    int[][] PARSER_TABLE =
      {
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, 11, 11, 11, 11, 11, 11, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10},
        {-1, -1, 12, 13, 14, 15, 17, 16, -1, -1, -1, -1, 19, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, 21, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 22, 22, -1, 22, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 27, 26, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, 29, 29, 29, 29, 29, 29, 29, -1, -1, -1, 29, 29, 29, -1, -1, -1, -1, 30, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 29, -1, -1, 30},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, -1, 34, -1, -1, -1, 35, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1, 36, 36, 36, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, 36, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37},
        {-1, 39, 39, 39, 39, 39, 39, 39, -1, -1, -1, 39, 39, 39, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 39, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, 41, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40},
        {-1, 43, 43, 43, 43, 43, 43, 43, -1, -1, -1, 46, 45, 44, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 43, -1, -1, -1},
        {-1, 47, 47, 47, 47, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, 49, 48, 48, 48, 48, 48, 48, -1, -1, -1, -1, 49},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 51, 52, 53, 54, 55, -1, -1, -1, -1, -1},
        {-1, 56, 56, 56, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, 57, 57, 57, 57, 57, 57, 57, 58, 59, -1, -1, 57},
        {-1, 60, 60, 60, 60, 60, 60, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 63, 61},
        {-1, 64, 65, 66, 67, 68, 70, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, 73, -1, -1, -1}
      };
    
    int[][] PRODUCTIONS =
      {
        {38, 24, 39, 25},
        {40},
        {0},
        {41, 40},
        {42},
        {44, 43},
        {42},
        {0},
        {15, 24, 45, 47, 25},
        {2, 46},
        {36, 45},
        {0},
        {3},
        {4},
        {5},
        {6},
        {8},
        {7},
        {14},
        {13},
        {48},
        {50, 49},
        {48},
        {0},
        {51},
        {53},
        {54},
        {55},
        {20, 24, 2, 52, 25},
        {59},
        {46, 19},
        {16, 24, 57, 25},
        {18, 22, 59, 23, 24, 48, 25, 56},
        {17, 24, 48, 25, 21, 22, 59, 23},
        {0},
        {24, 48, 25},
        {59, 58},
        {36, 57},
        {0},
        {61, 60},
        {0},
        {10, 61, 60},
        {11, 61, 60},
        {62},
        {14},
        {13},
        {12, 61},
        {65, 63},
        {64, 65},
        {0},
        {26},
        {27},
        {28},
        {29},
        {30},
        {31},
        {67, 66},
        {0},
        {32, 67, 66},
        {33, 67, 66},
        {69, 68},
        {0},
        {34, 69, 68},
        {35, 69, 68},
        {2},
        {3},
        {4},
        {5},
        {6},
        {8},
        {7},
        {22, 59, 23},
        {32, 69},
        {33, 69}
      };
    
    String[] PARSER_ERROR =
      {
        "",// "",
        " esperado EOF",// "Era esperado fim de programa",
        " esperado identificador",// "Era esperado identificador",
        " esperado inteiro",// "Era esperado inteiro",
        " esperado binario",// "Era esperado binario",
        " esperado hexadecimal",// "Era esperado hexadecimal",
        " esperado real",// "Era esperado real",
        " esperado string",// "Era esperado string",
        " esperado caracter",// "Era esperado caracter",
        " esperado comentario",// "Era esperado comentario",
        " esperado and",// "Era esperado AND",
        " esperado or",// "Era esperado OR",
        " esperado not",// "Era esperado NOT",
        " esperado false",// "Era esperado FALSE",
        " esperado true",// "Era esperado TRUE",
        " esperado let",// "Era esperado LET",
        " esperado display",// "Era esperado DISPLAY",
        " esperado do",// "Era esperado DO",
        " esperado if",// "Era esperado IF",
        " esperado read",// "Era esperado READ",
        " esperado set",// "Era esperado SET",
        " esperado until",// "Era esperado UNTIL",
        " esperado (",// "Era esperado \"(\"",
        " esperado )",// "Era esperado \")\"",
        " esperado [",// "Era esperado \"[\"",
        " esperado ]",// "Era esperado \"]\"",
        " esperado ==",// "Era esperado \"==\"",
        " esperado <>",// "Era esperado \"<>\"",
        " esperado <",// "Era esperado \"<\"",
        " esperado <=",// "Era esperado \"<=\"",
        " esperado >",// "Era esperado \">\"",
        " esperado >=",// "Era esperado \">=\"",
        " esperado +",// "Era esperado \"+\"",
        " esperado -",// "Era esperado \"-\"",
        " esperado *",// "Era esperado \"*\"",
        " esperado /",// "Era esperado \"/\"",
        " esperado ,",// "Era esperado \",\"",
        " esperado let [",// "<programa> inválido",
        " esperado let [",// "<lista_de_declaracoes> inv�lido",
        " esperado set display if do",// "<corpo> inv�lido",
        " esperado let [",// "<opcional> inv�lido",
        " esperado let",// "<declaracao> inv�lido",
        " esperado let [",// "<lista_de_variaveis> inv�lido",
        " esperado let",// "<lista_de_variaveis2> inv�lido",
        " esperado let",// "<variavel> inv�lido",
        
        " esperado identificador",// "<lista_de_identificadores> inv�lido",
        " esperado constante read ,",// "<lista_de_identificadores2> inv�lido",
        
        " esperado constante",// "<valor> inv�lido",
        " esperado set display if do",// "<lista_de_comandos> inv�lido",
        " esperado set display if set ]",// "<lista_de_comandos2> inv�lido",
        " esperado set display if do",// "<cmds> inv�lido",
        " esperado set",// "<cmd_attr_inpt> inv�lido",
        " esperada expressao read ,",// "<cmd_attr_inpt2> inv�lido",
        " esperado display",// "<cmd_oupt> inv�lido",
        " esperado if",// "<cmd_slct> inv�lido",
        " esperado do",// "<cmd_rept> inv�lido",
        " esperado display do if set [ ]",// "<alternativa> inv�lido",
        " esperada expressao ",// "<lista_de_expressoes> inv�lido",
        " esperada ] ,",// "<lista_de_expressoes2> inv�lido",
        " esperada expressao",// "<expressao> inv�lido",
        " esperada expressao",// "<expressao2> inv�lido",
        " esperado identificador constante ( + - not",// "<elemento> inv�lido",
        " esperado identificador inteiro binario hexadecimal real caracter string ( + -",// "<relacional> inv�lido",
        " esperado == <> < <= > >=",// "<relacional2> inv�lido",
        " esperado == <> < <= > >=",// "<operador_relacional> inv�lido",
        " esperado identificador inteiro binario hexadecimal real caracter string ( + -",// "<aritmetica> inv�lido",
        " esperado + -",// "<aritmetica2> inv�lido",
        " esperado identificador inteiro binario hexadecimal real caracter string ( + -",// "<termo> inv�lido",
        " esperado * /",// "<termo2> inv�lido",
        " esperado identificador inteiro binario hexadecimal real caracter string ( + -"// "<fator> inv�lido"
      };
}
